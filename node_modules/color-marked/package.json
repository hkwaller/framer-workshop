{
  "_args": [
    [
      "color-marked@~0.3.3",
      "/Users/hanneswaller/WebstormProjects/framer-workshop/node_modules/md-server"
    ]
  ],
  "_from": "color-marked@>=0.3.3 <0.4.0",
  "_id": "color-marked@0.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/color-marked",
  "_npmUser": {
    "email": "chemzqm@gmail.com",
    "name": "chemzqm"
  },
  "_npmVersion": "1.2.23",
  "_phantomChildren": {},
  "_requested": {
    "name": "color-marked",
    "raw": "color-marked@~0.3.3",
    "rawSpec": "~0.3.3",
    "scope": null,
    "spec": ">=0.3.3 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/md-server"
  ],
  "_resolved": "https://registry.npmjs.org/color-marked/-/color-marked-0.3.3.tgz",
  "_shasum": "c84cf414805d5cddf5a4fb72b2a5ebae36df43de",
  "_shrinkwrap": null,
  "_spec": "color-marked@~0.3.3",
  "_where": "/Users/hanneswaller/WebstormProjects/framer-workshop/node_modules/md-server",
  "author": {
    "name": "qiming zhao"
  },
  "bin": {
    "color-marked": "./bin/marked"
  },
  "bugs": {
    "url": "http://github.com/chemzqm/marked/issues"
  },
  "dependencies": {
    "cheerio": "~0.10.8",
    "css-parse": "~1.2.0",
    "highlight.js": "~7.3.0"
  },
  "description": "markdown parser with highlight and inline code style support, useful for writing email with markdown",
  "devDependencies": {
    "markdown": "*",
    "robotskirt": "*",
    "showdown": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "c84cf414805d5cddf5a4fb72b2a5ebae36df43de",
    "tarball": "https://registry.npmjs.org/color-marked/-/color-marked-0.3.3.tgz"
  },
  "homepage": "https://github.com/chemzqm/marked",
  "keywords": [
    "email",
    "highlight",
    "html",
    "markdown",
    "markup"
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "chemzqm",
      "email": "chemzqm@gmail.com"
    }
  ],
  "man": [
    "./man/marked.1"
  ],
  "name": "color-marked",
  "optionalDependencies": {},
  "preferGlobal": false,
  "readme": "# marked\n\nMarkdown parser with code hightlight form [highlight.js](https://github.com/isagalaev/highlight.js) and optional inline color support. It could be useful when you want to colorful your code in your email.\n## Options\n\nSee [orignal README](https://github.com/chjj/marked) to get understand of most options.\n\nAddtional options include `color` and `colorscheme`\n\n* `color` parse the css file and add inline color for the code element.\n\n* `colorscheme` which colorscheme to use, see [highlight.js demo](http://softwaremaniacs.org/media/soft/highlight/test.html) to get all the colorschemes and supported languages.\n\n* The value of `langPrefix` was changed to `language-`\n\n## Browser support\n\n* import css file is required to display colors.\n\n* When used in browser, import highlight.js file before marked.js file and make sure function `window.hljs` is availabel for converting.\n\n* Use function `marked(src, option)` for markdown converting.\n\n## Component support\n\nInstall by using [component](https://github.com/component/component) command.\n\nSyntax highlight is enable by default, default colorscheme is `solarized_light`.\n\n    component install chemzqm/marked\n\n**Usage Example:**\n\n``` js\nvar marked = require('marked');\nconsole.log(marked('**This** is marked for [component](http://component.io/)'));\n```\n\n[demo](http://chemzqm.github.io/marked/index.html)\n\n## Javascript API usage\n\n``` js\n// Set default options\nmarked.setOptions({\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false,\n  langPrefix: 'language-',\n  highlight: function(code, lang) {\n    if (lang === 'js') {\n      return highlighter.javascript(code);\n    }\n    return code;\n  }\n});\nconsole.log(marked('i am using __markdown__.'));\n```\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n\n``` bash\n$ node\n> require('marked').lexer('> i am using marked.')\n[ { type: 'blockquote_start' },\n  { type: 'paragraph',\n    text: 'i am using marked.' },\n  { type: 'blockquote_end' },\n  links: {} ]\n```\n\n## Running Tests & Contributing\n\nIf you want to submit a pull request, make sure your changes pass the test\nsuite. If you're adding a new feature, be sure to add your own test.\n\nThe marked test suite is set up slightly strangely: `test/new` is for all tests\nthat are not part of the original markdown.pl test suite (this is where your\ntest should go if you make one). `test/original` is only for the original\nmarkdown.pl tests. `test/tests` houses both types of tests after they have been\ncombined and moved/generated by running `node test --fix` or `marked --test\n--fix`.\n\nIn other words, if you have a test to add, add it to `test/new/` and then\nregenerate the tests with `node test --fix`. Commit the result. If your test\nuses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\ncan add `.nogfm` to the filename. So, `my-test.text` becomes\n`my-test.nogfm.text`. You can do this with any marked option. Say you want\nline breaks and smartypants enabled, your filename should be:\n`my-test.breaks.smartypants.text`.\n\nTo run the tests:\n\n``` bash\ncd marked/\nnode test\n```\n\n### Contribution and License Agreement\n\nIf you contribute code to marked, you are implicitly allowing your code to be\ndistributed under the MIT license. You are also implicitly verifying that all\ncode is your original work. `</legalese>`\n\n### License\n\nCopyright (c) 2011-2013, Qiming Zhao. (MIT License)\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git@github.com:chemzqm/marked.git"
  },
  "scripts": {
    "bench": "node test --bench",
    "test": "node test"
  },
  "tags": [
    "html",
    "markdown",
    "markup"
  ],
  "version": "0.3.3"
}
